// C++ code
//

#define INTERRUPTOR 4
#define PULSADOR_AUMENTA 3
#define PULSADOR_DISMINUYE 2
#define SENSOR_FUERZA A0
#define FOTODIODO A1
#define LED_AMARILLO 13
#define UNIDAD A4
#define DECENA A5
#define A 10
#define B 11
#define C 5
#define D 6
#define E 7
#define F 9
#define G 8
#define OFF 0

int digit_counter = 0;
int increase = 1;
int increase_before = 1;
int decrease = 1;
int decrease_before = 1;

void setup(){
    pinMode(INTERRUPTOR, INPUT_PULLUP);
    pinMode(PULSADOR_AUMENTA, INPUT_PULLUP);
    pinMode(PULSADOR_DISMINUYE, INPUT_PULLUP);
    pinMode(A, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(C, OUTPUT);
    pinMode(D, OUTPUT);
    pinMode(E, OUTPUT);
    pinMode(F, OUTPUT);
    pinMode(G, OUTPUT);
  	pinMode(LED_AMARILLO, OUTPUT);
  	pinMode(UNIDAD, OUTPUT);
  	pinMode(DECENA, OUTPUT);
    digitalWrite(UNIDAD, 0);
  	digitalWrite(DECENA, 0);
  	display_Digits(0);
    Serial.begin(9600);
}

void loop(){
  	/*Se guarda el valor de la función key_Pressed y se analiza
  	si pertenece a un aumento o a una disminución,
    aumentando o disminuyendo el contador respectivamente.
    A su vez, se guarda el valor de la fuerza realizada mediante el sensor, y
    de ser mayor a 7N aproximadamente, se resetea el contador.*/
  
	int pressed = key_Pressed();
  	int sensor = analogRead(SENSOR_FUERZA);
  	int diodo = analogRead(FOTODIODO);
  	int slipped = digitalRead(INTERRUPTOR);
  	
  	/*Implica que el sensor captó una fuerza mayor a 7N, provocando
  	que los contadores se reinicien a cero.*/
  	if(sensor > 150){
    	digit_counter = 0;
    }
  
  	/*Implica que el fotodiodo captó una determinada cantidad de luz tal 
    que provoca que el voltaje aumente y, en nuestra función, que los contadores 
    se pongan automáticamente en 31 (la luz en la quiniela :D) y que el led
    amarillo se encienda.*/
  	if(diodo > 80){
    	digit_counter = 31;
      	digitalWrite(LED_AMARILLO, HIGH);
    }
  	else {
	digit_counter = 0;
    	digitalWrite(LED_AMARILLO, LOW);
    }
  
  	//Implica que el interruptor está a la derecha (Contador Normal).
  	if(slipped == 0){
    	if(pressed == PULSADOR_AUMENTA){
          digit_counter++;
          if(digit_counter > 99){
              digit_counter = 0;
      	}
      }
      else if(pressed == PULSADOR_DISMINUYE){
          digit_counter--;
          if(digit_counter < 0){
              digit_counter = 99;
          }
      }
      display_Counter(digit_counter);
    }
  	//Implica que el interruptor está a la izquierda (Contador Primos).
  	else{
      	int divisors = 0;
      	if(pressed == PULSADOR_AUMENTA){
          digit_counter++;
          for(int i = 1; i <= digit_counter; i++){
          	if(digit_counter % i == 0){
            	divisors ++;
            }
          }
          /*Mientras los divisores sean mayores a dos o iguales a
          uno, se seguirán recorriendo los números para saltearse
          aquellos que no sean primos.*/  
          while(divisors > 2 || divisors == 1){
            if(pressed == PULSADOR_AUMENTA){
              digit_counter ++;
            }
          	if(digit_counter > 97){
              digit_counter = 0;
          	}
            divisors = 0;
            for(int i = 1; i <= digit_counter; i++){
              if(digit_counter % i == 0){
                divisors ++;
              }
            }
          }
          if(digit_counter > 97){
            digit_counter = 0;
          }
        }
      	else if(pressed == PULSADOR_DISMINUYE){
          digit_counter--;
          for(int i = 1; i <= digit_counter; i++){
          	if(digit_counter % i == 0){
            	divisors ++;
            }
          }
          while(divisors > 2 || divisors == 1){
            if(pressed == PULSADOR_DISMINUYE){
              digit_counter --;
            }
            if(digit_counter < 0){
              digit_counter = 97;
          	}
            divisors = 0;
            for(int i = 1; i <= digit_counter; i++){
              if(digit_counter % i == 0){
                divisors ++;
              }
            }
          }
          if(digit_counter < 0){
            digit_counter = 97;
          }
        }
    }
  	display_Counter(digit_counter);
}

void display_Digits(int digit){
  	/*Función que prende o apaga cada una de las terminales de un
  	display, formando los distintos números del 0 al 9.*/
  
	digitalWrite(A, LOW);
    digitalWrite(B, LOW);
    digitalWrite(C, LOW);
    digitalWrite(D, LOW);
    digitalWrite(E, LOW);
    digitalWrite(F, LOW);
    digitalWrite(G, LOW);
  
    switch(digit){
      case 0:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(F, HIGH);
        break;
      case 1:
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        break;
      case 2:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(G, HIGH);
        break;
      case 3:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(G, HIGH);
        break;
      case 4:
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(F, HIGH);
        digitalWrite(G, HIGH);
        break;
      case 5:
        digitalWrite(A, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(F, HIGH);
        digitalWrite(G, HIGH);
        break;
      case 6:
        digitalWrite(A, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(F, HIGH);
        digitalWrite(G, HIGH);
        break;
      case 7:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        break;
      case 8:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(F, HIGH);
      	digitalWrite(G, HIGH);
        break;
      case 9:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(F, HIGH);
        digitalWrite(G, HIGH);
        break;
    }
}

void switch_On(int digit){
  	/*Función que, según lo retornado de la función display_Counter,
    prende o apaga el display DECENA o UNIDAD según se requiera.*/
  	
	if(digit == UNIDAD){
    	digitalWrite(UNIDAD, LOW);
      	digitalWrite(DECENA, HIGH);
      	delay(10);
    }
  	else if(digit == DECENA){
    	digitalWrite(UNIDAD, HIGH);
      	digitalWrite(DECENA, LOW);
      	delay(10);
    }
  	else{
    	digitalWrite(UNIDAD, HIGH);
      	digitalWrite(DECENA, HIGH);
    }
}

void display_Counter(int counter){
  	/*Función que permite mostrar en los displays los números según
  	el contador vaya aumentando o disminuyendo.*/
  
	switch_On(OFF);
  	display_Digits(counter/10);
  	switch_On(DECENA);
  	switch_On(OFF);
  	display_Digits(counter - 10 * ((int)counter / 10));
  	switch_On(UNIDAD);
}

int key_Pressed(void){
  	//Retorna el valor del pulsador apretado.

	increase = digitalRead(PULSADOR_AUMENTA);
  	decrease = digitalRead(PULSADOR_DISMINUYE);
  
  	//Implica que ningún pulsador está presionado.
  	if(increase){
    	increase_before = 1;  
    }
   	if(decrease){
    	decrease_before = 1;
    }
  
  	//Implica que algún pulsador se está presionando.
  	if(increase == 0 && increase != increase_before){
    	increase_before = increase;
      	return PULSADOR_AUMENTA;
    }
  	if(decrease == 0 && decrease != decrease_before){
    	decrease_before = decrease;
      	return PULSADOR_DISMINUYE;
    }

 return 0;
}
